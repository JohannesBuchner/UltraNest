{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model comparison"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model\n",
    "\n",
    "We again consider the sine model with gaussian measurement errors.\n",
    "\n",
    "$$ y = A_1 \\sin\\left(2 \\pi \\left(\\frac{t}{P_1} + t_1\\right)\\right) + B + \\epsilon $$\n",
    "\n",
    "where $\\epsilon \\sim \\mathrm{Normal}(0, \\sigma)$\n",
    "\n",
    "We want to test if this is preferred over pure noise.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from numpy import pi, sin\n",
    "\n",
    "def sine_model1(t, B, A1, P1, t1):\n",
    "    return A1 * sin((t / P1 + t1) * 2 * pi) + B\n",
    "\n",
    "def sine_model0(t, B):\n",
    "    return B + t*0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "The model has four unknown parameters per component:\n",
    "\n",
    "* the signal offset $B$\n",
    "* the amplitude $A$\n",
    "* the period $P$\n",
    "* the time offset $t_0$\n",
    "\n",
    "## Generating data\n",
    "\n",
    "Lets generate some data following this model:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(42)\n",
    "\n",
    "n_data = 50\n",
    "\n",
    "# time of observations\n",
    "t = np.random.uniform(0, 5, size=n_data)\n",
    "# measurement values\n",
    "yerr = 1.0\n",
    "y = np.random.normal(sine_model1(t, B=1.0, A1=0.9, P1=3, t1=0), yerr)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualise the data\n",
    "\n",
    "Lets plot the data first to see what is going on:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure()\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.errorbar(x=t, y=y, yerr=yerr,\n",
    "             marker='o', ls=' ', color='orange')\n",
    "t_range = np.linspace(0, 5, 1000)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A beautiful noisy data set, with some hints of a modulation.\n",
    "\n",
    "Now the question is: what model parameters are allowed under these data?\n",
    "\n",
    "First, we need to define the parameter ranges through a prior:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "parameters1 = ['B', 'A1', 'P1', 't1']\n",
    "\n",
    "def prior_transform1(cube):\n",
    "    # the argument, cube, consists of values from 0 to 1\n",
    "    # we have to convert them to physical scales\n",
    "    \n",
    "    params = cube.copy()\n",
    "    # let background level go from -10 to +10\n",
    "    params[0] = cube[0] * 20 - 10\n",
    "    # let amplitude go from 0.1 to 100\n",
    "    params[1] = 10**(cube[1] * 3 - 1)\n",
    "    # let period go from 0.3 to 30\n",
    "    params[2] = 10**(cube[2] * 2)\n",
    "    # let time go from 0 to 1\n",
    "    params[3] = cube[3]\n",
    "    return params\n",
    "\n",
    "parameters0 = ['B']\n",
    "\n",
    "def prior_transform0(cube):\n",
    "    # the argument, cube, consists of values from 0 to 1\n",
    "    # we have to convert them to physical scales\n",
    "    \n",
    "    params = cube.copy()\n",
    "    # let background level go from -10 to +10\n",
    "    params[0] = cube[0] * 20 - 10\n",
    "    return params\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define the likelihood, which measures how far the data are from the model predictions.\n",
    "More precisely, how often the parameters would arise under the given parameters.\n",
    "We assume gaussian measurement errors of known size (yerr).\n",
    "\n",
    "$$\\chi^2 = \\sum\\left(\\frac{m_i-y_i}{\\sigma}\\right)^2 $$\n",
    "$$\\log \\cal{L} = -\\chi^2 / 2$$\n",
    "\n",
    "where the model is the sine_model function from above at time $t_i$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy.stats\n",
    "\n",
    "def log_likelihood1(params):\n",
    "    # unpack the current parameters:\n",
    "    B, A1, P1, t1 = params\n",
    "\n",
    "    # compute for each x point, where it should lie in y\n",
    "    y_model = sine_model1(t, B=B, A1=A1, P1=P1, t1=t1)\n",
    "    # compute likelihood\n",
    "    loglike = -0.5 * (((y_model - y) / yerr)**2).sum()\n",
    "    \n",
    "    return loglike\n",
    "\n",
    "def log_likelihood0(params):\n",
    "    B, = params\n",
    "    \n",
    "    y_model = sine_model0(t, B=B)\n",
    "    # compute likelihood\n",
    "    loglike = -0.5 * (((y_model - y) / yerr)**2).sum()\n",
    "    \n",
    "    return loglike\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Solve the problem:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import ultranest\n",
    "\n",
    "sampler1 = ultranest.ReactiveNestedSampler(parameters1, log_likelihood1, prior_transform1)\n",
    "\n",
    "sampler0 = ultranest.ReactiveNestedSampler(parameters0, log_likelihood0, prior_transform0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ultranest] Sampling 400 live points from prior ...\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "443718ae0f234a01b8cd4e414d7cbb79",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "VBox(children=(HTML(value=''), GridspecLayout(children=(HTML(value=\"<div style='background-color:#6E6BF4;'>&nb…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ultranest] Explored until L=-2e+01   [-20.7338..-20.7331]*| it/evals=6642/99344 eff=6.7129% N=400 400   \n",
      "[ultranest] Likelihood function evaluations: 99353\n",
      "[ultranest]   logZ = -32.68 +- 0.1148\n",
      "[ultranest] Effective samples strategy satisfied (ESS = 2537.6, need >400)\n",
      "[ultranest] Posterior uncertainty strategy is satisfied (KL: 0.46+-0.06 nat, need <0.50 nat)\n",
      "[ultranest] Evidency uncertainty strategy is satisfied (dlogz=0.30, need <0.5)\n",
      "[ultranest]   logZ error budget: single: 0.15 bs:0.11 tail:0.01 total:0.12 required:<0.50\n",
      "[ultranest] done iterating.\n",
      "\n",
      "logZ = -32.686 +- 0.260\n",
      "  single instance: logZ = -32.686 +- 0.154\n",
      "  bootstrapped   : logZ = -32.681 +- 0.260\n",
      "  tail           : logZ = +- 0.010\n",
      "\n",
      "    B                   1.03 +- 0.32\n",
      "    A1                  0.89 +- 0.34\n",
      "    P1                  3.9 +- 6.7\n",
      "    t1                  0.46 +- 0.44\n"
     ]
    }
   ],
   "source": [
    "result1 = sampler1.run(min_num_live_points=400)\n",
    "sampler1.print_results()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ultranest] Sampling 400 live points from prior ...\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c9736b2f0f4e4151ac4d8b829dd89021",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "VBox(children=(HTML(value=''), GridspecLayout(children=(HTML(value=\"<div style='background-color:#6E6BF4;'>&nb…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ultranest] Explored until L=-3e+01   [-31.7138..-31.7138]*| it/evals=2920/3406 eff=97.1391% N=400 0  \n",
      "[ultranest] Likelihood function evaluations: 3435\n",
      "[ultranest]   logZ = -35.72 +- 0.07079\n",
      "[ultranest] Effective samples strategy satisfied (ESS = 1266.0, need >400)\n",
      "[ultranest] Posterior uncertainty strategy is satisfied (KL: 0.46+-0.07 nat, need <0.50 nat)\n",
      "[ultranest] Evidency uncertainty strategy is satisfied (dlogz=0.16, need <0.5)\n",
      "[ultranest]   logZ error budget: single: 0.09 bs:0.07 tail:0.03 total:0.08 required:<0.50\n",
      "[ultranest] done iterating.\n",
      "\n",
      "logZ = -35.710 +- 0.160\n",
      "  single instance: logZ = -35.710 +- 0.094\n",
      "  bootstrapped   : logZ = -35.722 +- 0.156\n",
      "  tail           : logZ = +- 0.034\n",
      "\n",
      "    B                   1.15 +- 0.14\n"
     ]
    }
   ],
   "source": [
    "result0 = sampler0.run(min_num_live_points=400)\n",
    "sampler0.print_results()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot the parameter posterior probability distribution\n",
    "\n",
    "A classic corner plot:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 698.4x698.4 with 16 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from ultranest.plot import cornerplot\n",
    "cornerplot(result1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 244.8x244.8 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cornerplot(result0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you want, you can also play with the posterior as a pandas frame:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>B</th>\n",
       "      <th>A1</th>\n",
       "      <th>P1</th>\n",
       "      <th>t1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>7047.000000</td>\n",
       "      <td>7047.000000</td>\n",
       "      <td>7047.000000</td>\n",
       "      <td>7047.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>1.031719</td>\n",
       "      <td>0.889383</td>\n",
       "      <td>3.928380</td>\n",
       "      <td>0.463131</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>0.320323</td>\n",
       "      <td>0.337931</td>\n",
       "      <td>6.655103</td>\n",
       "      <td>0.438961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>-2.254976</td>\n",
       "      <td>0.101163</td>\n",
       "      <td>1.034575</td>\n",
       "      <td>0.000046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>0.909554</td>\n",
       "      <td>0.722280</td>\n",
       "      <td>2.887038</td>\n",
       "      <td>0.044096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>1.013514</td>\n",
       "      <td>0.876311</td>\n",
       "      <td>3.036552</td>\n",
       "      <td>0.144829</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>1.118239</td>\n",
       "      <td>1.035640</td>\n",
       "      <td>3.199337</td>\n",
       "      <td>0.950620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>7.994730</td>\n",
       "      <td>7.237188</td>\n",
       "      <td>98.909077</td>\n",
       "      <td>0.999950</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 B           A1           P1           t1\n",
       "count  7047.000000  7047.000000  7047.000000  7047.000000\n",
       "mean      1.031719     0.889383     3.928380     0.463131\n",
       "std       0.320323     0.337931     6.655103     0.438961\n",
       "min      -2.254976     0.101163     1.034575     0.000046\n",
       "25%       0.909554     0.722280     2.887038     0.044096\n",
       "50%       1.013514     0.876311     3.036552     0.144829\n",
       "75%       1.118239     1.035640     3.199337     0.950620\n",
       "max       7.994730     7.237188    98.909077     0.999950"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "df = pd.DataFrame(data=result1['samples'], columns=result1['paramnames'])\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot the fit:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To evaluate whether the results make any sense, we want\n",
    "to look whether the fitted function goes through the data points."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PolyCollection at 0x7f8c1128a310>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.title(\"1-sine fit\")\n",
    "plt.xlabel('x')\n",
    "plt.ylabel('y')\n",
    "plt.errorbar(x=t, y=y, yerr=yerr,\n",
    "             marker='o', ls=' ', color='orange')\n",
    "\n",
    "\n",
    "t_grid = np.linspace(0, 5, 400)\n",
    "\n",
    "from ultranest.plot import PredictionBand\n",
    "band = PredictionBand(t_grid)\n",
    "\n",
    "# go through the solutions\n",
    "for B, A1, P1, t1 in sampler1.results['samples']:\n",
    "    # compute for each time the y value\n",
    "    band.add(sine_model1(t_grid, B=B, A1=A1, P1=P1, t1=t1))\n",
    "\n",
    "band.line(color='k')\n",
    "# add 1 sigma quantile\n",
    "band.shade(color='k', alpha=0.3)\n",
    "# add wider quantile (0.01 .. 0.99)\n",
    "band.shade(q=0.49, color='gray', alpha=0.2)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "\n",
    "\n",
    "## Model comparison methods\n",
    "\n",
    "We now want to know:\n",
    "\n",
    "**Is the model with 2 components better than the model with one component?**\n",
    "\n",
    "What do we mean by \"better\" (\"it fits better\", \"the component is significant\")?\n",
    "\n",
    "a) Which model is better at predicting data it has not seen yet?\n",
    "\n",
    "b) Which model is more probably the true one, given this data, these models, and their parameter spaces?\n",
    "\n",
    "c) Which model is simplest, but complex enough to capture the information complexity of the data?\n",
    "\n",
    "\n",
    "## Bayesian model comparison\n",
    "\n",
    "Here we will focus on b, and apply Bayesian model comparison. \n",
    "\n",
    "For simplicity, we will assume equal a-prior model probabilities.\n",
    "\n",
    "The Bayes factor is:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "K = 20.56\n",
      "The 1-sine model is 20.56 times more probable than the no-signal model\n",
      "assuming the models are equally probable a priori.\n"
     ]
    }
   ],
   "source": [
    "K = np.exp(result1['logz'] - result0['logz'])\n",
    "print(\"K = %.2f\" % K)\n",
    "print(\"The 1-sine model is %.2f times more probable than the no-signal model\" % K)\n",
    "print(\"assuming the models are equally probable a priori.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "N.B.: Bayes factors are influenced by parameter and model priors. It is a good idea to vary them and see how sensitive the result is."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For making decisions, thresholds are needed. They can be calibrated to desired low false decisions rates with simulations (generate data under the simpler model, look at K distribution)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calibrating Bayes factor thresholds\n",
    "\n",
    "Lets generate some data sets under the null hypothesis (noise-only model) and see \n",
    "how often we would get a large Bayes factor. For this, we need to fit with both \n",
    "models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "import logging\n",
    "logging.getLogger('ultranest').setLevel(logging.FATAL)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Z=-22.6(96.75%) | Like=-18.44..-18.44 [-18.4423..-18.4423]*| it/evals=3040/3550 eff=96.5079% N=400 0  0  \n",
      "Bayes factor: 0.31\n",
      "Z=-29.0(89.53%) | Like=-22.48..-21.23 [-22.4812..-22.4807]*| it/evals=3538/265463 eff=1.3348% N=400 00   \r"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/user/.local/lib/python3.7/site-packages/ultranest-2.0.3-py3.7-linux-x86_64.egg/ultranest/integrator.py:1197: UserWarning: Sampling from region seems inefficient. You can try increasing nlive, frac_remain, dlogz, dKL, decrease min_ess). [0/40 accepted, it=2500]\n",
      "  warnings.warn(\"Sampling from region seems inefficient. You can try increasing nlive, frac_remain, dlogz, dKL, decrease min_ess). [%d/%d accepted, it=%d]\" % (accepted.sum(), ndraw, nit))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Z=-28.9(97.31%) | Like=-22.22..-21.19 [-22.2180..-22.2177]*| it/evals=4202/619627 eff=0.6786% N=400 \r"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-15-b28743895319>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0;31m# analyse with sine model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0msampler1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0multranest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mReactiveNestedSampler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparameters1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlog_likelihood1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprior_transform1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m     \u001b[0mZ1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msampler1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mviz_callback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'logz'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m     \u001b[0;31m# analyse with noise-only model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m     \u001b[0msampler0\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0multranest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mReactiveNestedSampler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparameters0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlog_likelihood0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprior_transform0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.7/site-packages/ultranest-2.0.3-py3.7-linux-x86_64.egg/ultranest/integrator.py\u001b[0m in \u001b[0;36mrun\u001b[0;34m(self, update_interval_iter_fraction, update_interval_ncall, log_interval, show_status, viz_callback, dlogz, dKL, frac_remain, Lepsilon, min_ess, max_iters, max_ncalls, max_num_improvement_loops, min_num_live_points, cluster_num_live_points)\u001b[0m\n\u001b[1;32m   1721\u001b[0m             \u001b[0mcluster_num_live_points\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcluster_num_live_points\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1722\u001b[0m             \u001b[0mshow_status\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mshow_status\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1723\u001b[0;31m             \u001b[0mviz_callback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mviz_callback\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1724\u001b[0m         ):\n\u001b[1;32m   1725\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.7/site-packages/ultranest-2.0.3-py3.7-linux-x86_64.egg/ultranest/integrator.py\u001b[0m in \u001b[0;36mrun_iter\u001b[0;34m(self, update_interval_iter_fraction, update_interval_ncall, log_interval, dlogz, dKL, frac_remain, Lepsilon, min_ess, max_iters, max_ncalls, max_num_improvement_loops, min_num_live_points, cluster_num_live_points, show_status, viz_callback)\u001b[0m\n\u001b[1;32m   1936\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1937\u001b[0m                     \u001b[0;31m# sample point\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1938\u001b[0;31m                     \u001b[0mu\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mL\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_create_point\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mLmin\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mLmin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mndraw\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mndraw\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mactive_u\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mactive_u\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mactive_values\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mactive_values\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1939\u001b[0m                     \u001b[0mchild\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpointpile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmake_node\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mL\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mu\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1940\u001b[0m                     \u001b[0mmain_iterator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLmax\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmain_iterator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLmax\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mL\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.7/site-packages/ultranest-2.0.3-py3.7-linux-x86_64.egg/ultranest/integrator.py\u001b[0m in \u001b[0;36m_create_point\u001b[0;34m(self, Lmin, ndraw, active_u, active_values)\u001b[0m\n\u001b[1;32m   1277\u001b[0m                 \u001b[0;32mwhile\u001b[0m \u001b[0mib\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msamples\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1278\u001b[0m                     \u001b[0mib\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1279\u001b[0;31m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_refill_samples\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mLmin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mndraw\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnit\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1280\u001b[0m                     \u001b[0mnit\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1281\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.7/site-packages/ultranest-2.0.3-py3.7-linux-x86_64.egg/ultranest/integrator.py\u001b[0m in \u001b[0;36m_refill_samples\u001b[0;34m(self, Lmin, ndraw, nit)\u001b[0m\n\u001b[1;32m   1176\u001b[0m         \u001b[0;34m\"\"\"Get new samples from region.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1177\u001b[0m         \u001b[0mnc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1178\u001b[0;31m         \u001b[0mu\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfather\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mregion\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnsamples\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mndraw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1179\u001b[0m         \u001b[0;32massert\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlogical_and\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mu\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mu\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mu\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1180\u001b[0m         \u001b[0mnu\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mu\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.7/site-packages/ultranest-2.0.3-py3.7-linux-x86_64.egg/ultranest/mlfriends.pyx\u001b[0m in \u001b[0;36multranest.mlfriends.MLFriends.sample\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.7/site-packages/ultranest-2.0.3-py3.7-linux-x86_64.egg/ultranest/mlfriends.pyx\u001b[0m in \u001b[0;36multranest.mlfriends.MLFriends.sample_from_points\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mmtrand.pyx\u001b[0m in \u001b[0;36mnumpy.random.mtrand.RandomState.randint\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32m_bounded_integers.pyx\u001b[0m in \u001b[0;36mnumpy.random._bounded_integers._rand_int64\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mprod\u001b[0;34m(*args, **kwargs)\u001b[0m\n",
      "\u001b[0;32m/mnt/data/daten/PostDoc2/home/anaconda3/envs/ciao-4.12/lib/python3.7/site-packages/numpy/core/fromnumeric.py\u001b[0m in \u001b[0;36mprod\u001b[0;34m(a, axis, dtype, out, keepdims, initial, where)\u001b[0m\n\u001b[1;32m   2960\u001b[0m     \"\"\"\n\u001b[1;32m   2961\u001b[0m     return _wrapreduction(a, np.multiply, 'prod', axis, dtype, out,\n\u001b[0;32m-> 2962\u001b[0;31m                           keepdims=keepdims, initial=initial, where=where)\n\u001b[0m\u001b[1;32m   2963\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2964\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/mnt/data/daten/PostDoc2/home/anaconda3/envs/ciao-4.12/lib/python3.7/site-packages/numpy/core/fromnumeric.py\u001b[0m in \u001b[0;36m_wrapreduction\u001b[0;34m(obj, ufunc, method, axis, dtype, out, **kwargs)\u001b[0m\n\u001b[1;32m     88\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mreduction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mpasskwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     89\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 90\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mufunc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreduce\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mpasskwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     91\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     92\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "K_simulated = []\n",
    "\n",
    "import logging\n",
    "logging.getLogger('ultranest').handlers[-1].setLevel(logging.FATAL)\n",
    "\n",
    "# go through 100 plausible parameters\n",
    "for B in sampler0.results['samples'][:10]:\n",
    "    # generate new data\n",
    "    y = np.random.normal(sine_model0(t, B=1.0), yerr)\n",
    "    \n",
    "    # analyse with sine model\n",
    "    sampler1 = ultranest.ReactiveNestedSampler(parameters1, log_likelihood1, prior_transform1)\n",
    "    Z1 = sampler1.run(viz_callback=False)['logz']\n",
    "    # analyse with noise-only model\n",
    "    sampler0 = ultranest.ReactiveNestedSampler(parameters0, log_likelihood0, prior_transform0)\n",
    "    Z0 = sampler0.run(viz_callback=False)['logz']\n",
    "    # store Bayes factor\n",
    "    K_here = Z1 - Z0\n",
    "    K_simulated.append(K_here)\n",
    "    print()\n",
    "    print(\"Bayes factor: %.2f\" % np.exp(K_here))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure()\n",
    "plt.hist(np.exp(K_simulated), histtype='step', label='From simulated noise data')\n",
    "ylo, yhi = plt.ylim()\n",
    "plt.vlines(K, ylo, yhi, label='From our real data')\n",
    "plt.xscale('log')\n",
    "plt.xlabel('Bayes factor')\n",
    "plt.ylabel('Frequency')\n",
    "plt.legend(loc='upper center');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we run this a bit longer, we will fill in the simulation histogram better. But already now we can see:\n",
    "\n",
    "We are using simulations to measure how often, by chance, we would see a Bayes factor higher than the one we observe. By building up a histogram, we can get a p-value, telling us our false decision rate for any Bayes factor threshold. \n",
    "Thus, we are putting a frequentist property on our Bayesian inference-based decision. \n",
    "\n",
    "So I would say: \n",
    "**Pure noise does not produce as high a Bayes factor as we see it in the real data.**\n",
    "\n",
    "Calibrating Bayes factor thresholds reduces the dependence on model priors and model parameter priors.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Further reading\n",
    "\n",
    "* Buchner+14 https://arxiv.org/abs/1402.0004 (§5.2, Appendix C for calibration)\n",
    "* Trotta+08 https://arxiv.org/abs/0803.4089\n",
    "* https://en.wikipedia.org/wiki/Bayes_factor\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
