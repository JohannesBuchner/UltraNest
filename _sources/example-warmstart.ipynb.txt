{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tutorial: experimenting with models\n",
    "\n",
    "In this tutorial you will learn:\n",
    "\n",
    " - How to play with model variations\n",
    " - How UltraNest can resume and reuse an existing run, even if you modify the data/likelihood\n",
    "\n",
    "As a simple example, lets say we want to estimate the mean and standard deviation of a sample of points. Over time, more and more points are added."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generate some data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from numpy import pi, log\n",
    "\n",
    "np.random.seed(1)\n",
    "Ndata = 200\n",
    "mean_true = 42.0\n",
    "sigma_true = 0.1\n",
    "y = np.random.normal(mean_true, sigma_true, size=Ndata)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualise the data\n",
    "\n",
    "Lets plot the data first to see what is going on:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure()\n",
    "plt.errorbar(x=np.arange(Ndata), y=y, yerr=sigma_true, marker='x', ls=' ');\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from ultranest import ReactiveNestedSampler\n",
    "\n",
    "parameters = ['mean', 'scatter']\n",
    "\n",
    "def prior_transform(x):\n",
    "    z = np.empty_like(x)\n",
    "    z[0] = x[0] * 2000 - 1000\n",
    "    z[1] = 10**(x[1] * 4 - 2)\n",
    "    return z\n",
    "\n",
    "import scipy.stats\n",
    "def log_likelihood(params):\n",
    "    mean, sigma = params\n",
    "    return scipy.stats.norm(mean, sigma).logpdf(yseen).sum()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Adding one data point at a time, no warm start"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "reference_results = []\n",
    "\n",
    "for i in range(10, Ndata, 20):\n",
    "    print()\n",
    "    print(\"Iteration with %d data points\" % i)\n",
    "    yseen = y[:i]\n",
    "    sampler_ref = ReactiveNestedSampler(parameters, log_likelihood, prior_transform)\n",
    "    res_ref = sampler_ref.run(min_num_live_points=400, max_num_improvement_loops=0, viz_callback=None, frac_remain=0.5)\n",
    "    reference_results.append(res_ref)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Adding one data point at a time, with warm start"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "results = []\n",
    "\n",
    "yseen = y[:i]\n",
    "\n",
    "# delete any existing content:\n",
    "ReactiveNestedSampler(parameters, log_likelihood, prior_transform,\n",
    "                      log_dir='warmstartdoc', resume='overwrite')\n",
    "\n",
    "for i in range(10, Ndata, 20):\n",
    "    print()\n",
    "    print(\"Iteration with %d data points\" % i)\n",
    "    \n",
    "    yseen = y[:i]\n",
    "    sampler = ReactiveNestedSampler(parameters, log_likelihood, prior_transform,\n",
    "                                              log_dir='warmstartdoc', resume='resume-similar')\n",
    "    ncall_initial = int(sampler.ncall)\n",
    "    res = sampler.run(frac_remain=0.5, viz_callback=None)\n",
    "    results.append((i, res, ncall_initial))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Likelihood evaluations saved"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ndim = len(parameters)\n",
    "plt.figure(figsize=(10, 10))\n",
    "for (i, res, ncall_initial), res_ref in zip(results, reference_results):\n",
    "    for j in range(ndim):\n",
    "        plt.subplot(ndim + 2, 1, 1+j)\n",
    "        plt.ylabel(parameters[j])\n",
    "        plt.errorbar(x=i, y=res['samples'][:,j].mean(), yerr=res['samples'][:,j].std(), marker='x', color='r')\n",
    "        plt.errorbar(x=i, y=res_ref['samples'][:,j].mean(), yerr=res_ref['samples'][:,j].std(), marker='x', color='gray')\n",
    "    \n",
    "    plt.subplot(ndim + 2, 1, 1+ndim)\n",
    "    plt.ylabel('$\\log(\\Delta Z)$')\n",
    "    plt.plot(i, res['logz'] - res_ref['logz'], 'x', color='r')\n",
    "    plt.subplot(ndim + 2, 1, 1+ndim+1)\n",
    "    plt.ylabel('Likelihood call fraction')\n",
    "    plt.plot(i, ((res['ncall'] - ncall_initial) / res_ref['ncall']), 'x', color='r')\n",
    "    plt.ylim(0, 1)\n",
    "\n",
    "plt.subplot(ndim + 2, 1, 1)\n",
    "plt.hlines(mean_true, 0, i+1, color='k', linestyles=':')\n",
    "plt.subplot(ndim + 2, 1, 2)\n",
    "plt.hlines(sigma_true, 0, i+1, color='k', linestyles=':')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusion\n",
    "\n",
    "Notice the time saving in the bottom panel a cost reduction of ~30%. This benefit is *independent of problem dimension*. The cost savings are higher, the more similar the modified problem is.\n",
    "\n",
    "This feature allows you to:\n",
    "\n",
    "* vary the data (change the analysis pipeline)\n",
    "* vary model assumptions \n",
    "\n",
    "**without needing to start the computation from scratch** (potentially costly).\n",
    "\n",
    "Warmstart (resume='resume-similar') is *experimental* and it is recommended to do a full, clean run to obtain final, reliable results before publication.\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
